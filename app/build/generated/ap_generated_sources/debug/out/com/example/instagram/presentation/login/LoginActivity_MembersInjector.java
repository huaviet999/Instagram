// Generated by Dagger (https://dagger.dev).
package com.example.instagram.presentation.login;

import com.example.instagram.presentation.base.BaseActivity_MembersInjector;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginActivity_MembersInjector implements MembersInjector<LoginActivity> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<LoginContract.Presenter> presenterProvider;

  public LoginActivity_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<LoginContract.Presenter> presenterProvider) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.presenterProvider = presenterProvider;
  }

  public static MembersInjector<LoginActivity> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<LoginContract.Presenter> presenterProvider) {
    return new LoginActivity_MembersInjector(androidInjectorProvider, presenterProvider);}

  @Override
  public void injectMembers(LoginActivity instance) {
    BaseActivity_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectPresenter(instance, presenterProvider.get());
  }

  @InjectedFieldSignature("com.example.instagram.presentation.login.LoginActivity.presenter")
  public static void injectPresenter(LoginActivity instance, LoginContract.Presenter presenter) {
    instance.presenter = presenter;
  }
}

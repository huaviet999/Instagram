// Generated by Dagger (https://dagger.dev).
package com.example.instagram.presentation.register;

import com.instagram.domain.interactor.RegisterAccountUseCase;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RegisterPresenterImpl_Factory implements Factory<RegisterPresenterImpl> {
  private final Provider<RegisterAccountUseCase> registerAccountUseCaseProvider;

  public RegisterPresenterImpl_Factory(
      Provider<RegisterAccountUseCase> registerAccountUseCaseProvider) {
    this.registerAccountUseCaseProvider = registerAccountUseCaseProvider;
  }

  @Override
  public RegisterPresenterImpl get() {
    RegisterPresenterImpl instance = newInstance();
    RegisterPresenterImpl_MembersInjector.injectRegisterAccountUseCase(instance, registerAccountUseCaseProvider.get());
    return instance;
  }

  public static RegisterPresenterImpl_Factory create(
      Provider<RegisterAccountUseCase> registerAccountUseCaseProvider) {
    return new RegisterPresenterImpl_Factory(registerAccountUseCaseProvider);
  }

  public static RegisterPresenterImpl newInstance() {
    return new RegisterPresenterImpl();
  }
}

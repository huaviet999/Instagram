// Generated by Dagger (https://dagger.dev).
package com.example.instagram.presentation.register;

import com.instagram.domain.interactor.RegisterAccountUseCase;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RegisterPresenterImpl_MembersInjector implements MembersInjector<RegisterPresenterImpl> {
  private final Provider<RegisterAccountUseCase> registerAccountUseCaseProvider;

  public RegisterPresenterImpl_MembersInjector(
      Provider<RegisterAccountUseCase> registerAccountUseCaseProvider) {
    this.registerAccountUseCaseProvider = registerAccountUseCaseProvider;
  }

  public static MembersInjector<RegisterPresenterImpl> create(
      Provider<RegisterAccountUseCase> registerAccountUseCaseProvider) {
    return new RegisterPresenterImpl_MembersInjector(registerAccountUseCaseProvider);}

  @Override
  public void injectMembers(RegisterPresenterImpl instance) {
    injectRegisterAccountUseCase(instance, registerAccountUseCaseProvider.get());
  }

  @InjectedFieldSignature("com.example.instagram.presentation.register.RegisterPresenterImpl.registerAccountUseCase")
  public static void injectRegisterAccountUseCase(RegisterPresenterImpl instance,
      RegisterAccountUseCase registerAccountUseCase) {
    instance.registerAccountUseCase = registerAccountUseCase;
  }
}

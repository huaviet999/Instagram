// Generated by Dagger (https://dagger.dev).
package com.example.instagram.di;

import com.example.data.AccountInfoRepositoryImpl;
import com.example.data.AuthenticationRepositoryImpl;
import com.example.instagram.myapp.MyApp;
import com.example.instagram.myapp.MyApp_MembersInjector;
import com.example.instagram.presentation.add.AddActivity;
import com.example.instagram.presentation.add.AddActivity_MembersInjector;
import com.example.instagram.presentation.add.AddPresenterImpl;
import com.example.instagram.presentation.base.BaseActivity_MembersInjector;
import com.example.instagram.presentation.favorite.FavoriteFragment;
import com.example.instagram.presentation.favorite.FavoriteFragmentPresenterImpl;
import com.example.instagram.presentation.favorite.FavoriteFragment_MembersInjector;
import com.example.instagram.presentation.home.HomeActivity;
import com.example.instagram.presentation.home.HomeActivity_MembersInjector;
import com.example.instagram.presentation.home.HomeModule_FavoriteFragment;
import com.example.instagram.presentation.home.HomeModule_HomeFragment;
import com.example.instagram.presentation.home.HomeModule_ProfileFragment;
import com.example.instagram.presentation.home.HomeModule_SearchFragment;
import com.example.instagram.presentation.home.HomePresenterImpl;
import com.example.instagram.presentation.home.fragment.HomeFragment;
import com.example.instagram.presentation.home.fragment.HomeFragmentPresenterImpl;
import com.example.instagram.presentation.home.fragment.HomeFragment_MembersInjector;
import com.example.instagram.presentation.login.LoginActivity;
import com.example.instagram.presentation.login.LoginActivity_MembersInjector;
import com.example.instagram.presentation.login.LoginPresenterImpl;
import com.example.instagram.presentation.login.LoginPresenterImpl_Factory;
import com.example.instagram.presentation.login.LoginPresenterImpl_MembersInjector;
import com.example.instagram.presentation.profile.ProfileFragment;
import com.example.instagram.presentation.profile.ProfileFragmentPresenterImpl;
import com.example.instagram.presentation.profile.ProfileFragment_MembersInjector;
import com.example.instagram.presentation.register.RegisterActivity;
import com.example.instagram.presentation.register.RegisterActivity_MembersInjector;
import com.example.instagram.presentation.register.RegisterPresenterImpl;
import com.example.instagram.presentation.register.RegisterPresenterImpl_Factory;
import com.example.instagram.presentation.register.RegisterPresenterImpl_MembersInjector;
import com.example.instagram.presentation.search.SearchFragment;
import com.example.instagram.presentation.search.SearchFragmentPresenterImpl;
import com.example.instagram.presentation.search.SearchFragment_MembersInjector;
import com.example.remote.AccountInfoRemoteImpl;
import com.example.remote.AuthenticationRemoteImpl;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DatabaseReference;
import com.instagram.domain.executor.ExecutionThread;
import com.instagram.domain.interactor.LoginUseCase;
import com.instagram.domain.interactor.RegisterAccountUseCase;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<AppBindingModule_LoginActivity.LoginActivitySubcomponent.Factory> loginActivitySubcomponentFactoryProvider;

  private Provider<AppBindingModule_HomeActivity.HomeActivitySubcomponent.Factory> homeActivitySubcomponentFactoryProvider;

  private Provider<AppBindingModule_RegisterActivity.RegisterActivitySubcomponent.Factory> registerActivitySubcomponentFactoryProvider;

  private Provider<AppBindingModule_AddActivity.AddActivitySubcomponent.Factory> addActivitySubcomponentFactoryProvider;

  private Provider<ExecutionThread> provideExecutionThreadProvider;

  private Provider<FirebaseAuth> provideAuthenticationReferenceProvider;

  private Provider<DatabaseReference> provideFirebaseDatabaseReferenceProvider;

  private DaggerAppComponent(AppModule appModuleParam, MyApp application) {

    initialize(appModuleParam, application);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(LoginActivity.class, (Provider) loginActivitySubcomponentFactoryProvider).put(HomeActivity.class, (Provider) homeActivitySubcomponentFactoryProvider).put(RegisterActivity.class, (Provider) registerActivitySubcomponentFactoryProvider).put(AddActivity.class, (Provider) addActivitySubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  private AuthenticationRemoteImpl getAuthenticationRemoteImpl() {
    return new AuthenticationRemoteImpl(provideAuthenticationReferenceProvider.get());}

  private AuthenticationRepositoryImpl getAuthenticationRepositoryImpl() {
    return new AuthenticationRepositoryImpl(getAuthenticationRemoteImpl());}

  private AccountInfoRemoteImpl getAccountInfoRemoteImpl() {
    return new AccountInfoRemoteImpl(provideFirebaseDatabaseReferenceProvider.get());}

  private AccountInfoRepositoryImpl getAccountInfoRepositoryImpl() {
    return new AccountInfoRepositoryImpl(getAccountInfoRemoteImpl());}

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final MyApp application) {
    this.loginActivitySubcomponentFactoryProvider = new Provider<AppBindingModule_LoginActivity.LoginActivitySubcomponent.Factory>() {
      @Override
      public AppBindingModule_LoginActivity.LoginActivitySubcomponent.Factory get() {
        return new LoginActivitySubcomponentFactory();}
    };
    this.homeActivitySubcomponentFactoryProvider = new Provider<AppBindingModule_HomeActivity.HomeActivitySubcomponent.Factory>() {
      @Override
      public AppBindingModule_HomeActivity.HomeActivitySubcomponent.Factory get() {
        return new HomeActivitySubcomponentFactory();}
    };
    this.registerActivitySubcomponentFactoryProvider = new Provider<AppBindingModule_RegisterActivity.RegisterActivitySubcomponent.Factory>() {
      @Override
      public AppBindingModule_RegisterActivity.RegisterActivitySubcomponent.Factory get() {
        return new RegisterActivitySubcomponentFactory();}
    };
    this.addActivitySubcomponentFactoryProvider = new Provider<AppBindingModule_AddActivity.AddActivitySubcomponent.Factory>() {
      @Override
      public AppBindingModule_AddActivity.AddActivitySubcomponent.Factory get() {
        return new AddActivitySubcomponentFactory();}
    };
    this.provideExecutionThreadProvider = DoubleCheck.provider(AppModule_ProvideExecutionThreadFactory.create(appModuleParam));
    this.provideAuthenticationReferenceProvider = DoubleCheck.provider(AppModule_ProvideAuthenticationReferenceFactory.create(appModuleParam));
    this.provideFirebaseDatabaseReferenceProvider = DoubleCheck.provider(AppModule_ProvideFirebaseDatabaseReferenceFactory.create(appModuleParam));
  }

  @Override
  public void inject(DaggerApplication arg0) {
    injectDaggerApplication(arg0);}

  @Override
  public void inject(MyApp instance) {
    injectMyApp(instance);}

  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private MyApp injectMyApp(MyApp instance) {
    MyApp_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private MyApp application;

    @Override
    public Builder application(MyApp application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, MyApp.class);
      return new DaggerAppComponent(new AppModule(), application);
    }
  }

  private final class LoginActivitySubcomponentFactory implements AppBindingModule_LoginActivity.LoginActivitySubcomponent.Factory {
    @Override
    public AppBindingModule_LoginActivity.LoginActivitySubcomponent create(LoginActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginActivitySubcomponentImpl(arg0);
    }
  }

  private final class LoginActivitySubcomponentImpl implements AppBindingModule_LoginActivity.LoginActivitySubcomponent {
    private LoginActivitySubcomponentImpl(LoginActivity arg0) {

    }

    private LoginUseCase getLoginUseCase() {
      return new LoginUseCase(DaggerAppComponent.this.provideExecutionThreadProvider.get(), DaggerAppComponent.this.getAuthenticationRepositoryImpl(), DaggerAppComponent.this.getAccountInfoRepositoryImpl());}

    private LoginPresenterImpl getLoginPresenterImpl() {
      return injectLoginPresenterImpl(LoginPresenterImpl_Factory.newInstance());}

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);}

    private LoginPresenterImpl injectLoginPresenterImpl(LoginPresenterImpl instance) {
      LoginPresenterImpl_MembersInjector.injectLoginUseCase(instance, getLoginUseCase());
      return instance;
    }

    private LoginActivity injectLoginActivity(LoginActivity instance) {
      BaseActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      LoginActivity_MembersInjector.injectPresenter(instance, getLoginPresenterImpl());
      return instance;
    }
  }

  private final class HomeActivitySubcomponentFactory implements AppBindingModule_HomeActivity.HomeActivitySubcomponent.Factory {
    @Override
    public AppBindingModule_HomeActivity.HomeActivitySubcomponent create(HomeActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new HomeActivitySubcomponentImpl(arg0);
    }
  }

  private final class HomeActivitySubcomponentImpl implements AppBindingModule_HomeActivity.HomeActivitySubcomponent {
    private Provider<HomeModule_HomeFragment.HomeFragmentSubcomponent.Factory> homeFragmentSubcomponentFactoryProvider;

    private Provider<HomeModule_SearchFragment.SearchFragmentSubcomponent.Factory> searchFragmentSubcomponentFactoryProvider;

    private Provider<HomeModule_FavoriteFragment.FavoriteFragmentSubcomponent.Factory> favoriteFragmentSubcomponentFactoryProvider;

    private Provider<HomeModule_ProfileFragment.ProfileFragmentSubcomponent.Factory> profileFragmentSubcomponentFactoryProvider;

    private HomeActivitySubcomponentImpl(HomeActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(8).put(LoginActivity.class, (Provider) DaggerAppComponent.this.loginActivitySubcomponentFactoryProvider).put(HomeActivity.class, (Provider) DaggerAppComponent.this.homeActivitySubcomponentFactoryProvider).put(RegisterActivity.class, (Provider) DaggerAppComponent.this.registerActivitySubcomponentFactoryProvider).put(AddActivity.class, (Provider) DaggerAppComponent.this.addActivitySubcomponentFactoryProvider).put(HomeFragment.class, (Provider) homeFragmentSubcomponentFactoryProvider).put(SearchFragment.class, (Provider) searchFragmentSubcomponentFactoryProvider).put(FavoriteFragment.class, (Provider) favoriteFragmentSubcomponentFactoryProvider).put(ProfileFragment.class, (Provider) profileFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    @SuppressWarnings("unchecked")
    private void initialize(final HomeActivity arg0) {
      this.homeFragmentSubcomponentFactoryProvider = new Provider<HomeModule_HomeFragment.HomeFragmentSubcomponent.Factory>() {
        @Override
        public HomeModule_HomeFragment.HomeFragmentSubcomponent.Factory get() {
          return new HomeFragmentSubcomponentFactory();}
      };
      this.searchFragmentSubcomponentFactoryProvider = new Provider<HomeModule_SearchFragment.SearchFragmentSubcomponent.Factory>() {
        @Override
        public HomeModule_SearchFragment.SearchFragmentSubcomponent.Factory get() {
          return new SearchFragmentSubcomponentFactory();}
      };
      this.favoriteFragmentSubcomponentFactoryProvider = new Provider<HomeModule_FavoriteFragment.FavoriteFragmentSubcomponent.Factory>() {
        @Override
        public HomeModule_FavoriteFragment.FavoriteFragmentSubcomponent.Factory get() {
          return new FavoriteFragmentSubcomponentFactory();}
      };
      this.profileFragmentSubcomponentFactoryProvider = new Provider<HomeModule_ProfileFragment.ProfileFragmentSubcomponent.Factory>() {
        @Override
        public HomeModule_ProfileFragment.ProfileFragmentSubcomponent.Factory get() {
          return new ProfileFragmentSubcomponentFactory();}
      };
    }

    @Override
    public void inject(HomeActivity arg0) {
      injectHomeActivity(arg0);}

    private HomeActivity injectHomeActivity(HomeActivity instance) {
      BaseActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      HomeActivity_MembersInjector.injectPresenter(instance, new HomePresenterImpl());
      return instance;
    }

    private final class HomeFragmentSubcomponentFactory implements HomeModule_HomeFragment.HomeFragmentSubcomponent.Factory {
      @Override
      public HomeModule_HomeFragment.HomeFragmentSubcomponent create(HomeFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new HomeFragmentSubcomponentImpl(arg0);
      }
    }

    private final class HomeFragmentSubcomponentImpl implements HomeModule_HomeFragment.HomeFragmentSubcomponent {
      private HomeFragmentSubcomponentImpl(HomeFragment arg0) {

      }

      @Override
      public void inject(HomeFragment arg0) {
        injectHomeFragment(arg0);}

      private HomeFragment injectHomeFragment(HomeFragment instance) {
        HomeFragment_MembersInjector.injectPresenter(instance, new HomeFragmentPresenterImpl());
        return instance;
      }
    }

    private final class SearchFragmentSubcomponentFactory implements HomeModule_SearchFragment.SearchFragmentSubcomponent.Factory {
      @Override
      public HomeModule_SearchFragment.SearchFragmentSubcomponent create(SearchFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SearchFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SearchFragmentSubcomponentImpl implements HomeModule_SearchFragment.SearchFragmentSubcomponent {
      private SearchFragmentSubcomponentImpl(SearchFragment arg0) {

      }

      @Override
      public void inject(SearchFragment arg0) {
        injectSearchFragment(arg0);}

      private SearchFragment injectSearchFragment(SearchFragment instance) {
        SearchFragment_MembersInjector.injectPresenter(instance, new SearchFragmentPresenterImpl());
        return instance;
      }
    }

    private final class FavoriteFragmentSubcomponentFactory implements HomeModule_FavoriteFragment.FavoriteFragmentSubcomponent.Factory {
      @Override
      public HomeModule_FavoriteFragment.FavoriteFragmentSubcomponent create(
          FavoriteFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new FavoriteFragmentSubcomponentImpl(arg0);
      }
    }

    private final class FavoriteFragmentSubcomponentImpl implements HomeModule_FavoriteFragment.FavoriteFragmentSubcomponent {
      private FavoriteFragmentSubcomponentImpl(FavoriteFragment arg0) {

      }

      @Override
      public void inject(FavoriteFragment arg0) {
        injectFavoriteFragment(arg0);}

      private FavoriteFragment injectFavoriteFragment(FavoriteFragment instance) {
        FavoriteFragment_MembersInjector.injectPresenter(instance, new FavoriteFragmentPresenterImpl());
        return instance;
      }
    }

    private final class ProfileFragmentSubcomponentFactory implements HomeModule_ProfileFragment.ProfileFragmentSubcomponent.Factory {
      @Override
      public HomeModule_ProfileFragment.ProfileFragmentSubcomponent create(ProfileFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ProfileFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ProfileFragmentSubcomponentImpl implements HomeModule_ProfileFragment.ProfileFragmentSubcomponent {
      private ProfileFragmentSubcomponentImpl(ProfileFragment arg0) {

      }

      @Override
      public void inject(ProfileFragment arg0) {
        injectProfileFragment(arg0);}

      private ProfileFragment injectProfileFragment(ProfileFragment instance) {
        ProfileFragment_MembersInjector.injectPresenter(instance, new ProfileFragmentPresenterImpl());
        return instance;
      }
    }
  }

  private final class RegisterActivitySubcomponentFactory implements AppBindingModule_RegisterActivity.RegisterActivitySubcomponent.Factory {
    @Override
    public AppBindingModule_RegisterActivity.RegisterActivitySubcomponent create(
        RegisterActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new RegisterActivitySubcomponentImpl(arg0);
    }
  }

  private final class RegisterActivitySubcomponentImpl implements AppBindingModule_RegisterActivity.RegisterActivitySubcomponent {
    private RegisterActivitySubcomponentImpl(RegisterActivity arg0) {

    }

    private RegisterAccountUseCase getRegisterAccountUseCase() {
      return new RegisterAccountUseCase(DaggerAppComponent.this.provideExecutionThreadProvider.get(), DaggerAppComponent.this.getAuthenticationRepositoryImpl(), DaggerAppComponent.this.getAccountInfoRepositoryImpl());}

    private RegisterPresenterImpl getRegisterPresenterImpl() {
      return injectRegisterPresenterImpl(RegisterPresenterImpl_Factory.newInstance());}

    @Override
    public void inject(RegisterActivity arg0) {
      injectRegisterActivity(arg0);}

    private RegisterPresenterImpl injectRegisterPresenterImpl(RegisterPresenterImpl instance) {
      RegisterPresenterImpl_MembersInjector.injectRegisterAccountUseCase(instance, getRegisterAccountUseCase());
      return instance;
    }

    private RegisterActivity injectRegisterActivity(RegisterActivity instance) {
      BaseActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      RegisterActivity_MembersInjector.injectPresenter(instance, getRegisterPresenterImpl());
      return instance;
    }
  }

  private final class AddActivitySubcomponentFactory implements AppBindingModule_AddActivity.AddActivitySubcomponent.Factory {
    @Override
    public AppBindingModule_AddActivity.AddActivitySubcomponent create(AddActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AddActivitySubcomponentImpl(arg0);
    }
  }

  private final class AddActivitySubcomponentImpl implements AppBindingModule_AddActivity.AddActivitySubcomponent {
    private AddActivitySubcomponentImpl(AddActivity arg0) {

    }

    @Override
    public void inject(AddActivity arg0) {
      injectAddActivity(arg0);}

    private AddActivity injectAddActivity(AddActivity instance) {
      BaseActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      AddActivity_MembersInjector.injectPresenter(instance, new AddPresenterImpl());
      return instance;
    }
  }
}
